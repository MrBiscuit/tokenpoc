// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2z5rPdFHZr7bZiak9bFJHw
// Component: -Ka_gvZbo3br
import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';
import Select from '../../Select'; // plasmic-import: wSrZBcJknfq/component
import Select__Option from '../../Select__Option'; // plasmic-import: E75G9lmFSaD/component
import Button from '../../Button'; // plasmic-import: heFNPqheeWK/component

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_tokens_poc_plugin.module.css'; // plasmic-import: 2z5rPdFHZr7bZiak9bFJHw/projectcss
import sty from './PlasmicHomepage.module.css'; // plasmic-import: -Ka_gvZbo3br/css

import ChecksvgIcon from './icons/PlasmicIcon__Checksvg'; // plasmic-import: _flsZuGE13Q/icon
import Icon3Icon from './icons/PlasmicIcon__Icon3'; // plasmic-import: 5ZgdjROksJ0/icon

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<'div'>;
  section?: p.Flex<'section'>;
  theme?: p.Flex<typeof Select>;
  mode?: p.Flex<typeof Select>;
  surface?: p.Flex<typeof Select>;
  button?: p.Flex<typeof Button>;
};

export interface DefaultHomepageProps {
  className?: string;
}

const __wrapUserFunction = globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={'root'}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <p.Stack
            as={'section'}
            data-plasmic-name={'section'}
            data-plasmic-override={overrides.section}
            hasGap={true}
            className={classNames(projectcss.all, sty.section)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__dxj39)}>
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__alUi)}>
                  <div className={classNames(projectcss.all, projectcss.__wab_text, sty.text__gfz6U)}>{'Brand:'}</div>
                </div>
              ) : null}

              <Select
                data-plasmic-name={'theme'}
                data-plasmic-override={overrides.theme}
                className={classNames('__wab_instance', sty.theme)}
              >
                <Select__Option className={classNames('__wab_instance', sty.option__ujBy0)} value={'1' as const}>
                  {'Option 1'}
                </Select__Option>

                <Select__Option className={classNames('__wab_instance', sty.option__hCyd)} value={'2' as const}>
                  {'Option 2'}
                </Select__Option>

                <Select__Option className={classNames('__wab_instance', sty.option__aRsK8)} value={'3' as const}>
                  {'Option 3'}
                </Select__Option>

                <Select__Option className={classNames('__wab_instance', sty.option___1OAXc)} value={'4' as const}>
                  {'Option 4'}
                </Select__Option>
              </Select>

              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__hHc63)}>
                  <div className={classNames(projectcss.all, projectcss.__wab_text, sty.text__u0RC1)}>
                    {'Platform:'}
                  </div>
                </div>
              ) : null}

              <Select
                data-plasmic-name={'mode'}
                data-plasmic-override={overrides.mode}
                className={classNames('__wab_instance', sty.mode)}
              >
                <Select__Option className={classNames('__wab_instance', sty.option__gUt1X)} value={'1' as const}>
                  {'Option 1'}
                </Select__Option>

                <Select__Option className={classNames('__wab_instance', sty.option___5Jtbh)} value={'2' as const}>
                  {'Option 2'}
                </Select__Option>

                <Select__Option className={classNames('__wab_instance', sty.option___8G3F)} value={'3' as const}>
                  {'Option 3'}
                </Select__Option>

                <Select__Option className={classNames('__wab_instance', sty.option__n7AvP)} value={'4' as const}>
                  {'Option 4'}
                </Select__Option>
              </Select>

              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__uoFhi)}>
                  <div className={classNames(projectcss.all, projectcss.__wab_text, sty.text__i977Q)}>
                    {'Language:'}
                  </div>
                </div>
              ) : null}

              <Select
                data-plasmic-name={'surface'}
                data-plasmic-override={overrides.surface}
                className={classNames('__wab_instance', sty.surface)}
              >
                <Select__Option className={classNames('__wab_instance', sty.option__oQwH)} value={'1' as const}>
                  {'Option 1'}
                </Select__Option>

                <Select__Option className={classNames('__wab_instance', sty.option__rztMh)} value={'2' as const}>
                  {'Option 2'}
                </Select__Option>

                <Select__Option className={classNames('__wab_instance', sty.option__y712P)} value={'3' as const}>
                  {'aswef.djv.hrueb.hir.efwef'}
                </Select__Option>

                <Select__Option className={classNames('__wab_instance', sty.option__iq3Xz)} value={'45' as const}>
                  {'Option 4'}
                </Select__Option>

                <Select__Option className={classNames('__wab_instance', sty.option__u5Fm4)} value={'6' as const}>
                  {'Option 4'}
                </Select__Option>

                <Select__Option className={classNames('__wab_instance', sty.option__orj7F)} value={'7' as const}>
                  {'Option 4'}
                </Select__Option>

                <Select__Option className={classNames('__wab_instance', sty.option__vC5Pc)} value={'8' as const}>
                  {'Option 4'}
                </Select__Option>

                <Select__Option className={classNames('__wab_instance', sty.option__yKwsN)} value={'9' as const}>
                  {'Option 4'}
                </Select__Option>
              </Select>
            </div>
          </p.Stack>

          <div className={classNames(projectcss.all, sty.freeBox__xfz5F)}>
            <Button
              data-plasmic-name={'button'}
              data-plasmic-override={overrides.button}
              className={classNames('__wab_instance', sty.button)}
            >
              {'Apply'}
            </Button>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'section', 'theme', 'mode', 'surface', 'button'],
  section: ['section', 'theme', 'mode', 'surface'],
  theme: ['theme'],
  mode: ['mode'],
  surface: ['surface'],
  button: ['button'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: 'div';
  section: 'section';
  theme: typeof Select;
  mode: typeof Select;
  surface: typeof Select;
  button: typeof Button;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<PlasmicHomepage__OverridesType, DescendantsType<T>>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicHomepage__VariantsArgs;
  args?: PlasmicHomepage__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType> &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(props: T & StrictProps<T, PropsType>) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps,
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicHomepage';
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent('section'),
    theme: makeNodeComponent('theme'),
    mode: makeNodeComponent('mode'),
    surface: makeNodeComponent('surface'),
    button: makeNodeComponent('button'),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: '',
      description: '',
      ogImageSrc: '',
      canonical: '',
    },
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
